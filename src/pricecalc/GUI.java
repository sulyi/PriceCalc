/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GUI.java
 *
 * Created on 2015.10.22., 23:10:59
 */
package pricecalc;

import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.AbstractTableModel;
import pricecalc.utils.CSVFileHandler;
import pricecalc.utils.CSVRecord;

/**
 *
 * @author arsene
 */
public class GUI extends javax.swing.JFrame implements UI{

    /** Creates new form GUI */
    public GUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPaneMain = new javax.swing.JSplitPane();
        jPanelDB = new javax.swing.JPanel();
        jToolBarDB = new javax.swing.JToolBar();
        jButtonSaveCondition = new javax.swing.JButton();
        jButtonSaveAllCondition = new javax.swing.JButton();
        jTannedPaneDB = new javax.swing.JTabbedPane();
        jScrollPaneBasePriceRatio = new javax.swing.JScrollPane();
        jTableBasePriceRatio = new javax.swing.JTable();
        jScrollPaneIntervals = new javax.swing.JScrollPane();
        jTableIntervals = new javax.swing.JTable();
        jScrollPaneServiceTypes = new javax.swing.JScrollPane();
        jTableServiceTypes = new javax.swing.JTable();
        jScrollPaneApClasses = new javax.swing.JScrollPane();
        jTableApClasses = new javax.swing.JTable();
        jScrollPaneAPs = new javax.swing.JScrollPane();
        jTableAPs = new javax.swing.JTable();
        jPanelContractsResults = new javax.swing.JPanel();
        jTabbedPaneContractsResults = new javax.swing.JTabbedPane();
        jToolBar1 = new javax.swing.JToolBar();
        jButtonSaveContract = new javax.swing.JButton();
        jButtonSaveAllContract = new javax.swing.JButton();
        jButtonRecalcResult = new javax.swing.JButton();
        jButtonRecalcAllResult = new javax.swing.JButton();
        jButtonSaveResult = new javax.swing.JButton();
        jButtonSaveAllResult = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ár kalkulátor");

        jSplitPaneMain.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jToolBarDB.setFloatable(false);
        jToolBarDB.setRollover(true);

        jButtonSaveCondition.setIcon(UIManager.getIcon("FileView.floppyDriveIcon"));
        jButtonSaveCondition.setToolTipText("Feltétel mentése");
        jButtonSaveCondition.setEnabled(false);
        jButtonSaveCondition.setFocusable(false);
        jButtonSaveCondition.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSaveCondition.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBarDB.add(jButtonSaveCondition);

        jButtonSaveAllCondition.setIcon(UIManager.getIcon("FileView.floppyDriveIcon"));
        jButtonSaveAllCondition.setToolTipText("Összes feltétel mentése");
        jButtonSaveAllCondition.setEnabled(false);
        jButtonSaveAllCondition.setFocusable(false);
        jButtonSaveAllCondition.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSaveAllCondition.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBarDB.add(jButtonSaveAllCondition);

        jScrollPaneBasePriceRatio.setViewportView(jTableBasePriceRatio);

        jTannedPaneDB.addTab("Alap ár százalék", jScrollPaneBasePriceRatio);

        jScrollPaneIntervals.setViewportView(jTableIntervals);

        jTannedPaneDB.addTab("Időszakok", jScrollPaneIntervals);

        jScrollPaneServiceTypes.setViewportView(jTableServiceTypes);

        jTannedPaneDB.addTab("Szolgáltatás típusok", jScrollPaneServiceTypes);

        jScrollPaneApClasses.setViewportView(jTableApClasses);

        jTannedPaneDB.addTab("Hozzáférési pont típusok", jScrollPaneApClasses);

        jScrollPaneAPs.setViewportView(jTableAPs);

        jTannedPaneDB.addTab("Hozzáférési pontok", jScrollPaneAPs);

        javax.swing.GroupLayout jPanelDBLayout = new javax.swing.GroupLayout(jPanelDB);
        jPanelDB.setLayout(jPanelDBLayout);
        jPanelDBLayout.setHorizontalGroup(
            jPanelDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBarDB, javax.swing.GroupLayout.DEFAULT_SIZE, 922, Short.MAX_VALUE)
            .addComponent(jTannedPaneDB, javax.swing.GroupLayout.DEFAULT_SIZE, 922, Short.MAX_VALUE)
        );
        jPanelDBLayout.setVerticalGroup(
            jPanelDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDBLayout.createSequentialGroup()
                .addComponent(jToolBarDB, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTannedPaneDB, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
        );

        jTannedPaneDB.getAccessibleContext().setAccessibleName("TabDB");

        jSplitPaneMain.setLeftComponent(jPanelDB);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButtonSaveContract.setIcon(UIManager.getIcon("FileView.floppyDriveIcon"));
        jButtonSaveContract.setToolTipText("Lekötés mentése");
        jButtonSaveContract.setEnabled(false);
        jButtonSaveContract.setFocusable(false);
        jButtonSaveContract.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSaveContract.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButtonSaveContract);

        jButtonSaveAllContract.setIcon(UIManager.getIcon("FileView.floppyDriveIcon"));
        jButtonSaveAllContract.setToolTipText("Összes lekötés mentése");
        jButtonSaveAllContract.setEnabled(false);
        jButtonSaveAllContract.setFocusable(false);
        jButtonSaveAllContract.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSaveAllContract.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButtonSaveAllContract);

        jButtonRecalcResult.setIcon(UIManager.getIcon("FileView.computerIcon"));
        jButtonRecalcResult.setToolTipText("Lekötés újra számítása");
        jButtonRecalcResult.setEnabled(false);
        jButtonRecalcResult.setFocusable(false);
        jButtonRecalcResult.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRecalcResult.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButtonRecalcResult);

        jButtonRecalcAllResult.setIcon(UIManager.getIcon("FileView.computerIcon"));
        jButtonRecalcAllResult.setToolTipText("Összes lekötés újraszámítása");
        jButtonRecalcAllResult.setEnabled(false);
        jButtonRecalcAllResult.setFocusable(false);
        jButtonRecalcAllResult.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRecalcAllResult.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButtonRecalcAllResult);

        jButtonSaveResult.setIcon(UIManager.getIcon("FileView.floppyDriveIcon"));
        jButtonSaveResult.setToolTipText("Eredmény mentése");
        jButtonSaveResult.setFocusable(false);
        jButtonSaveResult.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSaveResult.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButtonSaveResult);

        jButtonSaveAllResult.setIcon(UIManager.getIcon("FileView.floppyDriveIcon"));
        jButtonSaveAllResult.setToolTipText("Összes eredmény mentése");
        jButtonSaveAllResult.setFocusable(false);
        jButtonSaveAllResult.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSaveAllResult.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButtonSaveAllResult);

        javax.swing.GroupLayout jPanelContractsResultsLayout = new javax.swing.GroupLayout(jPanelContractsResults);
        jPanelContractsResults.setLayout(jPanelContractsResultsLayout);
        jPanelContractsResultsLayout.setHorizontalGroup(
            jPanelContractsResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneContractsResults, javax.swing.GroupLayout.DEFAULT_SIZE, 922, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 922, Short.MAX_VALUE)
        );
        jPanelContractsResultsLayout.setVerticalGroup(
            jPanelContractsResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelContractsResultsLayout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneContractsResults, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE))
        );

        jSplitPaneMain.setRightComponent(jPanelContractsResults);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPaneMain, javax.swing.GroupLayout.DEFAULT_SIZE, 924, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPaneMain, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    private void calculatorSaveTableCallback(PriceCalc calculator) {
        String baseName = jTabbedPaneContractsResults.getTitleAt(
                jTabbedPaneContractsResults.getSelectedIndex());

        JSplitPane jSplitPaneResult = (JSplitPane) ((JSplitPane)
                jTabbedPaneContractsResults
                .getSelectedComponent()).getBottomComponent();

        calculator.saveTable(baseName + "-result.csv",
                ((CSVTableModel) ((JTable) ((JScrollPane)
                jSplitPaneResult
                .getLeftComponent()).getViewport().getView()).getModel()).rows);
        
        calculator.saveTable(baseName + "-class-result.csv",
                ((CSVTableModel) ((JTable) ((JScrollPane)
                jSplitPaneResult
                .getRightComponent()).getViewport().getView()).getModel()).rows);
        
    }
    
    private void calculatorSaveAllTableCallback(PriceCalc calculator) {
        String baseName;

        int count = jTabbedPaneContractsResults.getTabCount();
        
        for (int i=0; i<count; i++){
            System.out.println(i);

            JSplitPane jSplitPaneResult = (JSplitPane) ((JSplitPane)
                    jTabbedPaneContractsResults
                    .getComponentAt(i)).getBottomComponent();

            baseName = jTabbedPaneContractsResults.getTitleAt(i);

            calculator.saveTable(baseName + "-result.csv",
                    ((CSVTableModel) ((JTable) ((JScrollPane) jSplitPaneResult.getLeftComponent()).getViewport().getView()).getModel()).rows);

            calculator.saveTable(baseName + "-class-result.csv",
                    ((CSVTableModel) ((JTable) ((JScrollPane) jSplitPaneResult.getRightComponent()).getViewport().getView()).getModel()).rows);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButtonRecalcAllResult;
    private javax.swing.JButton jButtonRecalcResult;
    private javax.swing.JButton jButtonSaveAllCondition;
    private javax.swing.JButton jButtonSaveAllContract;
    private javax.swing.JButton jButtonSaveAllResult;
    private javax.swing.JButton jButtonSaveCondition;
    private javax.swing.JButton jButtonSaveContract;
    private javax.swing.JButton jButtonSaveResult;
    private javax.swing.JPanel jPanelContractsResults;
    private javax.swing.JPanel jPanelDB;
    private javax.swing.JScrollPane jScrollPaneAPs;
    private javax.swing.JScrollPane jScrollPaneApClasses;
    private javax.swing.JScrollPane jScrollPaneBasePriceRatio;
    private javax.swing.JScrollPane jScrollPaneIntervals;
    private javax.swing.JScrollPane jScrollPaneServiceTypes;
    private javax.swing.JSplitPane jSplitPaneMain;
    private javax.swing.JTabbedPane jTabbedPaneContractsResults;
    private javax.swing.JTable jTableAPs;
    private javax.swing.JTable jTableApClasses;
    private javax.swing.JTable jTableBasePriceRatio;
    private javax.swing.JTable jTableIntervals;
    private javax.swing.JTable jTableServiceTypes;
    private javax.swing.JTabbedPane jTannedPaneDB;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBarDB;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

    private Dimension jOptionPaneDim = new Dimension(420, 180);
    
    private List<JSplitPane> LockedPanes = new ArrayList<>();
    // FIXME: minden táblához állítsa be a showContract callback obiektumát
    private boolean isCalculatorSet = false;
    
    @Override
    public void start() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        UIManager.put("OptionPane.cancelButtonText", "Mégsem");
        UIManager.put("OptionPane.noButtonText", "Nem");
        UIManager.put("OptionPane.okButtonText", "Rendben");
        UIManager.put("OptionPane.yesButtonText", "Igen");
        
        SwingUtilities.updateComponentTreeUI(this);
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            @Override
            public void run() {
                setVisible(true);
            }
        });
        
        showMessage("Jelenleg a táblázatok nem szerkeszthetőek."
                + " Azonban minden lehetőség adott, hogy a felület "
                + "bevezetékelése után erre legyen lehetőség.<br/><br/>"
                + "Üdvözlettel,<br/>Sülyi Ákos");
        
    }

    @Override
    public void showBasePriceRatio(CSVFileHandler handler, List<CSVRecord> rows) {
        jTableBasePriceRatio.setModel(new CSVTableModel(handler, rows));
    }
    
    
    @Override
    public void showIntervals(CSVFileHandler handler, List<CSVRecord> rows) {
        jTableIntervals.setModel(new CSVTableModel(handler, rows));
    }

    @Override
    public void showServiceTypes(CSVFileHandler handler, List<CSVRecord> rows) {
        jTableServiceTypes.setModel(new CSVTableModel(handler, rows));
    }

    @Override
    public void showApClasses(CSVFileHandler handler, List<CSVRecord> rows) {
        jTableApClasses.setModel(new CSVTableModel(handler, rows));
    }

    @Override
    public void showAPs(CSVFileHandler handler, List<CSVRecord> rows) {
        jTableAPs.setModel(new CSVTableModel(handler, rows));
    }
    
    @Override
    public void showContract(final String name,
                             final CSVFileHandler handler,
                             final List<CSVRecord> rows,
                             final PriceCalc calculator) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                List<CSVRecord> results;
                
                JSplitPane jSplitPaneContractResult = new JSplitPane();
                
                JScrollPane jScrollPaneContract = new JScrollPane();
                JTable jTableContract = new JTable();
                
                JSplitPane jSplitPaneResult = new JSplitPane();
                
                JScrollPane jScrollPaneResult = new JScrollPane();
                JTable jTableResult = new JTable();
                JScrollPane jScrollPaneResultByClass = new JScrollPane();
                JTable jTableResultByClass = new JTable();

                jTableContract.setModel(new CSVTableModel(handler, rows));
                
                results = calculator.calculateContract(name, rows);
                if (!results.isEmpty()) {
                    jTableResult.setModel(new CSVTableModel(results.get(0).getHandler(), results));
                }
                
                results = calculator.calculateContractByClass(name, rows);
                if (!results.isEmpty()) {
                    jTableResultByClass.setModel(new CSVTableModel(results.get(0).getHandler(), results));
                }
                
                jScrollPaneContract.setViewportView(jTableContract);
                jScrollPaneResult.setViewportView(jTableResult);
                jScrollPaneResultByClass.setViewportView(jTableResultByClass);
                
                jSplitPaneResult.setResizeWeight(.5d);
                
                LockedPanes.add(jSplitPaneResult);
                jSplitPaneResult.addPropertyChangeListener(
                            JSplitPane.DIVIDER_LOCATION_PROPERTY, 
                            new PropertyChangeListener() {

                                @Override
                                public void propertyChange(PropertyChangeEvent evt) {
                                    JSplitPane source = (JSplitPane) evt.getSource();
                                    for (JSplitPane LP : LockedPanes){
                                        if(LP != source){
                                            LP.setDividerLocation((int) evt.getNewValue());
                                        }
                                    }
                                }
                            }
                        );
                if (!isCalculatorSet) {
                    jButtonSaveResult.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            if (evt.getID() == MouseEvent.MOUSE_CLICKED &&
                                    ((JButton) evt.getSource()).isEnabled()) {
                                calculatorSaveTableCallback(calculator);
                            }
                        }
                    });

                    jButtonSaveAllResult.addMouseListener(new java.awt.event.MouseAdapter() {

                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            if(((JButton) evt.getSource()).isEnabled()){
                                calculatorSaveAllTableCallback(calculator);
                            }
                        }
                    });
                    isCalculatorSet = true;
                }
                
                jSplitPaneResult.setLeftComponent(jScrollPaneResult);
                jSplitPaneResult.setRightComponent(jScrollPaneResultByClass);

                jSplitPaneContractResult.setDividerLocation(95);
                jSplitPaneContractResult.setOrientation(JSplitPane.VERTICAL_SPLIT);

                jSplitPaneContractResult.setTopComponent(jScrollPaneContract);
                jSplitPaneContractResult.setBottomComponent(jSplitPaneResult);
                
                jTabbedPaneContractsResults.addTab(name, jSplitPaneContractResult);
                
//                get JTableResult
//                ((JScrollPane)((JSplitPane)((JSplitPane) jTabbedPaneContractsResults.getSelectedComponent())
//                    .getBottomComponent()).getLeftComponent()).getViewport().getView()
            }
        });
        
    }
    
    @Override
    public void showError(String msg) { 
        JOptionPane pane = new JOptionPane("<html><body><p style='width: 250px;'>"
                + msg + "</p></body></html>", JOptionPane.ERROR_MESSAGE);
        JDialog dialog = pane.createDialog("Hiba történt!");
        
        dialog.setSize(jOptionPaneDim);
        dialog.setVisible(true);
        dialog.dispose();
    }

    @Override
    public void showMessage(String msg) {
        JOptionPane pane = new JOptionPane("<html><body><p style='width: 250px;'>"
                + msg + "</p></body></html>", JOptionPane.INFORMATION_MESSAGE);
        JDialog dialog = pane.createDialog("Üzenet");
        
        dialog.setSize(jOptionPaneDim);
        dialog.setVisible(true);
        dialog.dispose();
    }

    @Override
    public boolean askYesNo(String msg) {
        JOptionPane pane = new JOptionPane("<html><body><p style='width: 250px;'>"
                + msg + "</p></body></html>", JOptionPane.QUESTION_MESSAGE,
                JOptionPane.YES_NO_OPTION);
        JDialog dialog;
        do{
            dialog = pane.createDialog("Mi legyen a döntés?");

            dialog.setSize(jOptionPaneDim);
            dialog.setVisible(true);
            dialog.dispose();

            try {
                return (int) pane.getValue() == JOptionPane.YES_OPTION;
            } catch (NullPointerException ignore) {
            }
        } while(true);
    }
    
    class CSVTableModel extends AbstractTableModel {

        private final CSVFileHandler handler;
        private List<CSVRecord> rows;

        public CSVTableModel(CSVFileHandler handler, List<CSVRecord> rows) {
            this.handler = handler;
            this.rows = rows;
        }

        @Override
        public int getRowCount() {
            return rows.size();
        }

        @Override
        public int getColumnCount() {
            return handler.getHeader().size();
        }

        @Override
        public String getColumnName(int columnIndex) {
            return handler.getHeaderToStringArray()[columnIndex];
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return rows.get(rowIndex).toStringField(columnIndex);
        }
    }
    
}
